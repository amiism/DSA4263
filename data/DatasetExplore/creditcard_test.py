# -*- coding: utf-8 -*-
"""CreditCard_Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OwDpf4YKHrstmN_aElprit8tPjs5QJlK
"""

import numpy as np
import pandas as pd
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt

## allow colab to read from google drive
from google.colab import drive
drive.mount('/content/drive')

##working directory containing the dataset to interact with
train_path = '/content/drive/MyDrive/DSA4263-FinalProject/Data-CreditCard/fraudTrain.csv'    #please change to your local filepath directory when running
test_path = '/content/drive/MyDrive/DSA4263-FinalProject/Data-CreditCard/fraudTest.csv'

#import data
train_df = pd.read_csv(train_path)
test_df = pd.read_csv(test_path)

train_df.head()
train_df.info()

train_df.head()

#Check the split between fraud and not fraud
# Group the data by the 'is_fraud' column and count the occurrences of each value
fraud_counts = train_df['is_fraud'].value_counts()

# Plot the counts
fraud_counts.plot(kind='bar', color=['blue', 'red'])

# Add labels and title
plt.title('Distribution of fraud vs genuine')
plt.xlabel('is_fraud')
plt.ylabel('Count')

# Add annotation text on top of each bar
for i, count in enumerate(fraud_counts):
    plt.text(i, count, str(count), ha='center', va='bottom')

# Show the plot
plt.show()



#As a percentage
# Calculate the percentage of each value
fraud_percentage = train_df['is_fraud'].value_counts(normalize=True) * 100

# Plot the pie chart
plt.pie(fraud_percentage, labels=fraud_percentage.index, autopct='%1.1f%%', colors=['lightblue', 'lightcoral'])

# Add title
plt.title('Distribution of fraud vs genuine')

# Equal aspect ratio ensures that pie is drawn as a circle
plt.axis('equal')

# Show the plot
plt.show()

# Calculate the total count of transactions
total_transactions = len(train_df)

# Calculate the counts of fraudulent and genuine transactions
fraudulent_count = train_df['is_fraud'].sum()
genuine_count = total_transactions - fraudulent_count

# Print the findings
print("Fraudulent transactions (is_fraud = 1):")
print("- Count: ", fraudulent_count)
print("- Percentage: {:.2f}%".format((fraudulent_count / total_transactions) * 100))

print("\nGenuine transactions (is_fraud = 0):")
print("- Count: ", genuine_count)
print("- Percentage: {:.2f}%".format((genuine_count / total_transactions) * 100))