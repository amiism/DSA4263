# -*- coding: utf-8 -*-
"""CreditCard_Test2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ke9ohXFGgim-jhnMEmlbX93NlVVCj-48
"""

import numpy as np
import pandas as pd
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt

## allow colab to read from google drive
from google.colab import drive
drive.mount('/content/drive')

##working directory containing the dataset to interact with
data_path = '/content/drive/MyDrive/DSA4263-FinalProject/Data-CreditCard/creditcard.csv'    #please change to your local filepath directory when running

#import data
data_df = pd.read_csv(data_path)

data_df.head()

"""Feature are unknown due to privacy concerns"""

# Get the column headers of data_df
column_headers = data_df.columns

# Print the column headers
print(column_headers)

data_df.info()

#To visualise the split of data
# Calculate the percentage of each class
class_percentage = data_df['Class'].value_counts(normalize=True) * 100

# Plot the pie chart
plt.pie(class_percentage, labels=class_percentage.index, autopct='%1.1f%%', colors=['lightblue', 'lightcoral'])

# Add title
plt.title('Distribution of Transactions - Fraud vs Genuine')

# Equal aspect ratio ensures that pie is drawn as a circle
plt.axis('equal')

# Show the plot
plt.show()

"""Data set is highly skewed with very few fraudulent transactions (0.2%)"""

#Checking if there could be any relationship between V1-V28 and whether or not the transaction is fraud
# Set the style of seaborn
sns.set(style="whitegrid")

# Create subplots for each feature
fig, axes = plt.subplots(nrows=7, ncols=4, figsize=(20, 25))

# Flatten the axes array
axes = axes.flatten()

# Loop through each feature and create a box plot
for i, column in enumerate(data_df.drop(columns=['Time', 'Amount', 'Class'])):
    sns.boxplot(x='Class', y=column, data=data_df, ax=axes[i])
    axes[i].set_title(f'Feature {column}')

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()

# Compute the correlation matrix
corr_matrix = data_df.corr()

# Extract the correlation of features with the Class column
class_corr = corr_matrix['Class'].drop(['Class', 'Time', 'Amount'])

# Set up the matplotlib figure
plt.figure(figsize=(12, 8))

# Plot the heatmap
sns.heatmap(class_corr.to_frame(), annot=True, cmap='coolwarm', vmin=-1, vmax=1, cbar=True, linewidths=0.5)

# Add title
plt.title('Correlation between Features and Class')

# Show the plot
plt.show()

